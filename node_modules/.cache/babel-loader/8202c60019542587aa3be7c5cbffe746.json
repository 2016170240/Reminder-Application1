{"ast":null,"code":"import { ADD_REMINDER, REMOVE_REMINDER, CLEARE_REMINDERS } from '../Action Types/index';\nimport { bake_cookie, read_cookie } from 'sfcookies';\n\nconst Red1 = (state = [], action) => {\n  let reminders = null;\n\n  if (action.type === ADD_REMINDER) {\n    reminders = [...state, {\n      text: action.text,\n      date: action.date,\n      id: Math.random()\n    }];\n    bake_cookie(\"reminders\", reminders);\n    console.log(\"from reducer\", reminders);\n    return reminders;\n  } else if (action.type === REMOVE_REMINDER) {\n    /*filter function =>\r\n    betraga3 array gededa \r\n    bte3mel cheak lw el reminder id mesh el action id 5odny m3ak f  el array el gededa \r\n    8er keda mata5odnesh ya3nay mat3rednesh ya3ny emsa7ny.\r\n    */\n    reminders = state.filter(reminder => reminder.id !== action.id);\n    bake_cookie(\"reminders\", reminders);\n    console.log(\"Removed\", reminders);\n    return reminders;\n  } else if (action.type === CLEARE_REMINDERS) {\n    reminders = [];\n    console.log(\"Cleared\", reminders);\n    bake_cookie(\"reminders\", reminders);\n    return reminders;\n  }\n\n  return state;\n};\n\nexport default Red1;","map":{"version":3,"sources":["H:/data/web/my courses/REACT JS2/Reminder App using redux and react/src/reducers/index.js"],"names":["ADD_REMINDER","REMOVE_REMINDER","CLEARE_REMINDERS","bake_cookie","read_cookie","Red1","state","action","reminders","type","text","date","id","Math","random","console","log","filter","reminder"],"mappings":"AAAA,SAAQA,YAAR,EAAsBC,eAAtB,EAAuCC,gBAAvC,QAA8D,uBAA9D;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,WAAzC;;AACA,MAAMC,IAAI,GAAG,CAACC,KAAK,GAAG,EAAT,EAAYC,MAAZ,KACb;AACI,MAAIC,SAAS,GAAG,IAAhB;;AACA,MAAGD,MAAM,CAACE,IAAP,KAAgBT,YAAnB,EACA;AACIQ,IAAAA,SAAS,GAAG,CAAC,GAAGF,KAAJ,EAAU;AAACI,MAAAA,IAAI,EAACH,MAAM,CAACG,IAAb;AAAkBC,MAAAA,IAAI,EAACJ,MAAM,CAACI,IAA9B;AAAmCC,MAAAA,EAAE,EAACC,IAAI,CAACC,MAAL;AAAtC,KAAV,CAAZ;AACAX,IAAAA,WAAW,CAAC,WAAD,EAAaK,SAAb,CAAX;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA2BR,SAA3B;AACA,WAAOA,SAAP;AACH,GAND,MAOK,IAAGD,MAAM,CAACE,IAAP,KAAgBR,eAAnB,EACL;AACE;;;;;AAMAO,IAAAA,SAAS,GAACF,KAAK,CAACW,MAAN,CAAaC,QAAQ,IAAEA,QAAQ,CAACN,EAAT,KAAgBL,MAAM,CAACK,EAA9C,CAAV;AACAT,IAAAA,WAAW,CAAC,WAAD,EAAaK,SAAb,CAAX;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBR,SAAtB;AACA,WAAOA,SAAP;AACD,GAZI,MAaA,IAAGD,MAAM,CAACE,IAAP,KAAgBP,gBAAnB,EACL;AACEM,IAAAA,SAAS,GAAC,EAAV;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBR,SAAtB;AACAL,IAAAA,WAAW,CAAC,WAAD,EAAaK,SAAb,CAAX;AACA,WAAOA,SAAP;AACD;;AACF,SACEF,KADF;AAIF,CAlCD;;AAmCA,eAAeD,IAAf","sourcesContent":["import {ADD_REMINDER, REMOVE_REMINDER, CLEARE_REMINDERS} from '../Action Types/index'\r\nimport { bake_cookie, read_cookie } from 'sfcookies'\r\nconst Red1 = (state = [],action)=>\r\n{\r\n    let reminders = null;\r\n    if(action.type === ADD_REMINDER)\r\n    {\r\n        reminders = [...state,{text:action.text,date:action.date,id:Math.random()}];\r\n        bake_cookie(\"reminders\",reminders);\r\n        console.log(\"from reducer\",reminders);\r\n        return reminders;\r\n    }\r\n    else if(action.type === REMOVE_REMINDER)\r\n    {\r\n      /*filter function =>\r\n      betraga3 array gededa \r\n bte3mel cheak lw el reminder id mesh el action id 5odny m3ak f  el array el gededa \r\n 8er keda mata5odnesh ya3nay mat3rednesh ya3ny emsa7ny.\r\n      */\r\n      \r\n      reminders=state.filter(reminder=>reminder.id !== action.id);\r\n      bake_cookie(\"reminders\",reminders);\r\n      console.log(\"Removed\",reminders);\r\n      return reminders;\r\n    }\r\n    else if(action.type === CLEARE_REMINDERS)\r\n    {\r\n      reminders=[];\r\n      console.log(\"Cleared\",reminders);\r\n      bake_cookie(\"reminders\",reminders);\r\n      return reminders;\r\n    }\r\n   return(\r\n     state\r\n   )\r\n\r\n}\r\nexport default Red1;"]},"metadata":{},"sourceType":"module"}